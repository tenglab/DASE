library(ggplot2)
library(data.table)
library(GenomicRanges)
library(RColorBrewer)
library(scales)
library(DESeq2)
library(Rsubread)
library(apeglm)
library(gridExtra)
library(ggpubr)
library(rstatix)
library(ggvenn)
# rose SE output table
se_profile_out<- readRDS("output_3/1_se_out.rds")
se_cat <- se_profile_out$se_category
se_stat <- se_profile_out$se_meta
se_meta <- merge(se_cat[,-2],se_stat,by="se_merge_name")
enhancer_fit <- se_profile_out$se_fit
cutoff <- se_profile_out$cutoff
s1_interact_temp <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/K562_interaction.bed",sep='\t', header =F)
s2_interact_temp <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/MCF7_interaction.bed",sep='\t', header =F)
# cut at 5
#s1_interact <- s1_interact_temp[which(s1_interact_temp$V5 >=5),]
#s2_interact <- s2_interact_temp[which(s2_interact_temp$V5 >=5),]
# non-normalized
s1_interact <- s1_interact_temp
s2_interact <- s2_interact_temp
#------------------------------------------------------------------------------
# function to extract interactions only in enhancer range of SE.
#------------------------------------------------------------------------------
extract_link_in_enhancer <- function(enhancer_df,interact_bed,ref_gene) {
# create interaction id based on left range
interact_bed$link_name <- apply(interact_bed[,c(1:3)],1, paste,collapse ="_" )
interact_bed$link_name <- gsub(" ","",interact_bed$link_name)
# create enhancer range
gr_se <- GRanges(
seqnames=enhancer_df$chr,
ranges=IRanges(enhancer_df$start,enhancer_df$end,names=enhancer_df$e_merge_name)
)
# create gene range
gr_gene_temp <- GRanges(
seqnames=ref_gene$chrom,
ranges=IRanges(ref_gene$start,ref_gene$end,names=ref_gene$gene_id),
strand = ref_gene$strand
)
gr_gene <- promoters(gr_gene_temp, upstream=3000, downstream=1000, use.names=TRUE)
# create link left range
gr_link_left <- GRanges(
seqnames=interact_bed$V9,
ranges=IRanges(interact_bed$V10,interact_bed$V11,names=interact_bed$link_name)
)
# create link right range
gr_link_right <- GRanges(
seqnames=interact_bed$V14,
ranges=IRanges(interact_bed$V15,
interact_bed$V16,names=interact_bed$link_name)
)
#-----------------------------------------------------------------------------
# subset left enhancer,right gene
gr_left_se <- findOverlaps(gr_link_left, gr_se)
se_left_df <- cbind(enhancer_df[subjectHits(gr_left_se),],interact_bed[queryHits(gr_left_se),])
gr_right_gene <- findOverlaps(gr_link_right,gr_gene)
gene_right_df <- cbind(ref_gene[subjectHits(gr_right_gene),],interact_bed[queryHits(gr_right_gene),])
se_left_gene_right_s <- se_left_df[se_left_df$link_name %in% gene_right_df$link_name,]
se_left_gene_right_g <- gene_right_df[gene_right_df$link_name %in% se_left_df$link_name,]
final_se_left_gene_right <- merge(se_left_gene_right_s,se_left_gene_right_g, by="link_name")
#-----------------------------------------------------------------------------
# subset right enhancer, left gene
gr_right_se <- findOverlaps(gr_link_right, gr_se)
se_right_df <- cbind(enhancer_df[subjectHits(gr_right_se),],interact_bed[queryHits(gr_right_se),])
se_right_df$link_name
gr_left_gene <- findOverlaps(gr_link_left,gr_gene)
gene_left_df <- cbind(ref_gene[subjectHits(gr_left_gene),],interact_bed[queryHits(gr_left_gene),])
se_right_gene_left_s <- se_right_df[se_right_df$link_name %in% gene_left_df$link_name,]
se_right_gene_left_g <- gene_left_df[gene_left_df$link_name %in% se_right_df$link_name,]
final_se_right_gene_left <- merge(se_right_gene_left_s,se_right_gene_left_g, by="link_name")
# rbind to final dataframe
final_out <- rbind(final_se_left_gene_right,final_se_right_gene_left)
final_out <- final_out[,c("link_name","e_merge_name","se_merge_name",
"baseMean.1","log2FoldChange.1","padj.1",
"gene_id","gene_name")]
return(final_out)
}
#------------------------------------------------------------------------------
# function to extract interactions SE range.
#------------------------------------------------------------------------------
extract_link_in_se <- function(se_df,interact_bed,ref_gene) {
# create interaction id based on left range
interact_bed$link_name <- apply(interact_bed[,c(1:3)],1, paste,collapse ="_" )
interact_bed$link_name <- gsub(" ","",interact_bed$link_name)
# create enhancer range
gr_se <- GRanges(
seqnames=se_df$chr,
ranges=IRanges(se_df$start,se_df$end,names=se_df$se_merge_name)
)
# create gene range
gr_gene_temp <- GRanges(
seqnames=ref_gene$chrom,
ranges=IRanges(ref_gene$start,ref_gene$end,names=ref_gene$gene_id),
strand = ref_gene$strand
)
gr_gene <- promoters(gr_gene_temp, upstream=3000, downstream=1000, use.names=TRUE)
# create link left range
gr_link_left <- GRanges(
seqnames=interact_bed$V9,
ranges=IRanges(interact_bed$V10,interact_bed$V11,names=interact_bed$link_name)
)
# create link right range
gr_link_right <- GRanges(
seqnames=interact_bed$V14,
ranges=IRanges(interact_bed$V15,
interact_bed$V16,names=interact_bed$link_name)
)
#-----------------------------------------------------------------------------
# subset left enhancer,right gene
gr_left_se <- findOverlaps(gr_link_left, gr_se)
se_left_df <- cbind(se_df[subjectHits(gr_left_se),],interact_bed[queryHits(gr_left_se),])
gr_right_gene <- findOverlaps(gr_link_right,gr_gene)
gene_right_df <- cbind(ref_gene[subjectHits(gr_right_gene),],interact_bed[queryHits(gr_right_gene),])
se_left_gene_right_s <- se_left_df[se_left_df$link_name %in% gene_right_df$link_name,]
se_left_gene_right_g <- gene_right_df[gene_right_df$link_name %in% se_left_df$link_name,]
final_se_left_gene_right <- merge(se_left_gene_right_s,se_left_gene_right_g, by="link_name")
#-----------------------------------------------------------------------------
# subset right enhancer, left gene
gr_right_se <- findOverlaps(gr_link_right, gr_se)
se_right_df <- cbind(se_df[subjectHits(gr_right_se),],interact_bed[queryHits(gr_right_se),])
se_right_df$link_name
gr_left_gene <- findOverlaps(gr_link_left,gr_gene)
gene_left_df <- cbind(ref_gene[subjectHits(gr_left_gene),],interact_bed[queryHits(gr_left_gene),])
se_right_gene_left_s <- se_right_df[se_right_df$link_name %in% gene_left_df$link_name,]
se_right_gene_left_g <- gene_left_df[gene_left_df$link_name %in% se_right_df$link_name,]
final_se_right_gene_left <- merge(se_right_gene_left_s,se_right_gene_left_g, by="link_name")
# rbind to final dataframe
final_out <- rbind(final_se_left_gene_right,final_se_right_gene_left)
final_out <- final_out[,c("link_name","se_merge_name",
"number_enhancer","category","direction",
"gene_id","gene_name")]
return(final_out)
}
#------------------------------------------------------------------------------
# create gene reference grange
#------------------------------------------------------------------------------
#----
gene_id_to_name <- read.table("~/Projects/gencode_ref/gencode.v38_gene_ref_id_name.txt",sep = "\t")
# clean gene_ref_id to name
ref_gene_range <- gene_id_to_name[,-c(2,6,8,9)]
colnames(ref_gene_range) <- c("chrom","type","start","end","strand")
ref_gene_range$gene_id <- sub("gene_id ","",
grep("gene_id",
unlist(strsplit(gene_id_to_name$V9, ";")),
value = T))
ref_gene_range$gene_name <- sub("gene_name ","",
grep("gene_name",
unlist(strsplit(gene_id_to_name$V9, ";")),
value = T))
#------------------------------------------------------------------------------
# Extract links of in enhancer range with in SE
#------------------------------------------------------------------------------
#----
s1_link_all_enhancer <- extract_link_in_enhancer(enhancer_fit,s1_interact,ref_gene_range)
s2_link_all_enhancer <- extract_link_in_enhancer(enhancer_fit,s2_interact,ref_gene_range)
# add sample name
s1_link_all_enhancer$sample <- rep("S1",nrow(s1_link_all_enhancer))
s2_link_all_enhancer$sample <- rep("S2",nrow(s2_link_all_enhancer))
# combine them
total_links_all_enhancer_temp <- rbind(s1_link_all_enhancer,s2_link_all_enhancer)
# add SE information
total_links_all_enhancer <- merge(total_links_all_enhancer_temp,
se_meta[,c(1,3,4)],by="se_merge_name")
# separate enhancer to s1_enriched,s2_enriched, and non_enriched (both basemean > 100)
s1_enriched <- total_links_all_enhancer[which(total_links_all_enhancer$log2FoldChange.1 < -2 &
total_links_all_enhancer$padj.1 < 0.05 &
total_links_all_enhancer$baseMean.1 > 100),]
s2_enriched <- total_links_all_enhancer[which(total_links_all_enhancer$log2FoldChange.1 > 2 &
total_links_all_enhancer$padj.1 < 0.05 &
total_links_all_enhancer$baseMean.1 > 100),]
non_enriched <- total_links_all_enhancer[which(total_links_all_enhancer$log2FoldChange.1 < 1  &
total_links_all_enhancer$log2FoldChange.1 > -1 &
total_links_all_enhancer$padj.1 > 0.1 &
total_links_all_enhancer$baseMean.1 > 100),]
# create gene list
non_enriched_gene_list <- unique(non_enriched$gene_name)
s1_enriched_gene_list <- unique(s1_enriched$gene_name)
s2_enriched_gene_list <- unique(s2_enriched$gene_name)
# create unique genes in each group
s1_enriched_unique_gene_list <- s1_enriched_gene_list[!(s1_enriched_gene_list %in% non_enriched_gene_list) &
!(s1_enriched_gene_list %in% s2_enriched_gene_list)]
s2_enriched_unique_gene_list <- s2_enriched_gene_list[!(s2_enriched_gene_list %in% non_enriched_gene_list) &
!(s2_enriched_gene_list %in% s1_enriched_gene_list)]
non_enriched_unique_gene_list <- non_enriched_gene_list[!(non_enriched_gene_list %in% s1_enriched_gene_list) &
!(non_enriched_gene_list %in% s2_enriched_gene_list)]
# extract unique genes for each groups
s1_enriched_unique_gene_link <- s1_enriched[(s1_enriched$gene_name %in% s1_enriched_unique_gene_list),]
s2_enriched_unique_gene_link <- s2_enriched[(s2_enriched$gene_name %in% s2_enriched_unique_gene_list),]
non_enriched_unique_gene_link <- non_enriched[(non_enriched$gene_name %in% non_enriched_unique_gene_list),]
# only count gene once for each groups
s1_enriched_unique_gene_df <- unique(s1_enriched_unique_gene_link[,c("e_merge_name","gene_name","sample")])
s2_enriched_unique_gene_df <- unique(s2_enriched_unique_gene_link[,c("e_merge_name","gene_name","sample")])
non_enriched_unique_gene_df <- unique(non_enriched_unique_gene_link[,c("e_merge_name","gene_name","sample")])
# count table
s1_enriched_unique_gene_count <- data.frame(unclass(table(s1_enriched_unique_gene_df$e_merge_name,s1_enriched_unique_gene_df$sample)))
s2_enriched_unique_gene_count <- data.frame(unclass(table(s2_enriched_unique_gene_df$e_merge_name,s2_enriched_unique_gene_df$sample)))
non_enriched_unique_gene_count <- data.frame(unclass(table(non_enriched_unique_gene_df$e_merge_name,non_enriched_unique_gene_df$sample)))
# add group names
s2_enriched_unique_gene_count$enhancer_group <- rep("Enriched_in_S2",nrow(s2_enriched_unique_gene_count))
s1_enriched_unique_gene_count$enhancer_group <- rep("Enriched_in_S1",nrow(s1_enriched_unique_gene_count))
non_enriched_unique_gene_count$enhancer_group <- rep("non_enriched",nrow(non_enriched_unique_gene_count))
#-------------------------------------------------------------------------------
# p1: venn diagram
#-------------------------------------------------------------------------------
#----
p1_plot_df <- list(non_sig_gene = non_enriched_gene_list,
s1_enriched_enhancer_gene = s1_enriched_gene_list,
s2_enriched_enhancer_gene = s2_enriched_gene_list)
p1 <- ggvenn(p1_plot_df)+
ggtitle("Constituent enhancer")
#-------------------------------------------------------------------------------
# p2: s2-s1 boxplot of non_enriched, enriched_in_s1, and enriched_in_s2
#-------------------------------------------------------------------------------
#----
# make boxplot of gene counts with multiple groups
# combine 3 groups
p2_plot_df <- rbind(s1_enriched_unique_gene_count,
s2_enriched_unique_gene_count,
non_enriched_unique_gene_count)
# remove both sample are 0
p2_plot_df <- p2_plot_df[which(p2_plot_df$S1!=0 |
p2_plot_df$S2 != 0),]
# add subtract gene counts s2-s1
p2_plot_df$s2_s1 <- p2_plot_df$S2-p2_plot_df$S1
p2_plot_df$enhancer_group <- factor(p2_plot_df$enhancer_group, levels = c("non_enriched","Enriched_in_S1",
"Enriched_in_S2"))
# count datapoints
p2_data_count <- as.data.frame(table(p2_plot_df$enhancer_group))
# normalized to median(non_enriched)
median_non_enriched <- median(p2_plot_df$s2_s1[which(p2_plot_df$enhancer_group=="non_enriched")])
p2_plot_df$s2_s1_norm <- p2_plot_df$s2_s1-median_non_enriched
test_comb <- list(
c("Enriched_in_S1","Enriched_in_S2")
)
p2 <- ggplot(p2_plot_df,aes(x=enhancer_group,y=s2_s1_norm,color=enhancer_group))+
#geom_violin(position = position_dodge(width = 0.5))+
#geom_boxplot(width=0.1,position = position_dodge(width = 1),
#             outlier.size = 1.2)+
#stat_boxplot(geom ='errorbar',width = 0.5,size=1) +
geom_boxplot(position = position_dodge(width = 0.3),outlier.shape = NA,
size=1,
width=0.3)+
#geom_jitter(size=0.2,position=position_jitterdodge(dodge.width = 0.9,
#                                           jitter.width = 0.2)) +
geom_hline(yintercept=0,linetype="dashed",color="grey50")+
#facet_grid(~category,scales = "free")+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5,size = 12),
axis.text=element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = "none")+
stat_compare_means(comparisons = test_comb,
label.y = c(5),
tip.length = 0.005,
bracket.size = 0.5,
label = "p.signif")+
#stat_pvalue_manual(p_value)+
ylab("Difference of linked gene counts (S2-S1)")+
xlab("Enhancer groups")+
ylim(c(-8,8))+
ggtitle("Linked gene counts of constituent enhancer")+
scale_color_manual(values = c("grey40","royalblue4","firebrick4"))
#-------------------------------------------------------------------------------
# extract links based on SE range
#-------------------------------------------------------------------------------
#----
# links of all SE
s1_link_all_se_range <- extract_link_in_se(se_meta,s1_interact,ref_gene_range)
s2_link_all_se_range <- extract_link_in_se(se_meta,s2_interact,ref_gene_range)
# add sample name
s1_link_all_se_range$sample <- rep("S1",nrow(s1_link_all_se_range))
s2_link_all_se_range$sample <- rep("S2",nrow(s2_link_all_se_range))
# combine them
total_links_se_range<- rbind(s1_link_all_se_range,s2_link_all_se_range)
# separate SE to similar and (overall, shorten, hollow,shifting)
similar_df <- total_links_se_range[which(total_links_se_range$category == "Similar"),]
changed_df <- total_links_se_range[which(total_links_se_range$category != "Similar" &
total_links_se_range$category != "Other"),]
# create gene list
similar_gene_list <- unique(similar_df$gene_name)
changed_gene_list <- unique(changed_df$gene_name)
# create unique genes in each group
similar_unique_gene_list <- similar_gene_list[!(similar_gene_list %in% changed_gene_list)]
changed_unique_gene_list <- changed_gene_list[!(changed_gene_list %in% similar_gene_list)]
#-------------------------------------------------------------------------------
# extract unique genes of S1 and S2 for each changed category
#-------------------------------------------------------------------------------
cat_name <- unique(changed_df$category)
changed_s1_s2_unique_gene_list <- c()
for (a in 1:length(cat_name)) {
temp_change <- changed_df[which(changed_df$category==cat_name[a]),]
# all gene
temp_s1_gl <- unique(temp_change$gene_name[which(temp_change$sample=="S1")])
temp_s2_gl <- unique(temp_change$gene_name[which(temp_change$sample=="S2")])
# unique gene
temp_s1_unique_gl <- temp_s1_gl[!(temp_s1_gl %in% temp_s2_gl)]
temp_s2_unique_gl <- temp_s2_gl[!(temp_s2_gl %in% temp_s1_gl)]
# combined
temp_change_unique <- c(temp_s1_unique_gl,temp_s2_unique_gl)
changed_s1_s2_unique_gene_list <- c(temp_change_unique,changed_s1_s2_unique_gene_list)
}
# extract unique genes for each group
similar_df_unique_gene_link <- similar_df[(similar_df$gene_name %in% similar_unique_gene_list),]
changed_df_unique_gene_link <- changed_df[(changed_df$gene_name %in% changed_unique_gene_list),]
changed_df_s1_s2_unique_gene_link <- changed_df[(changed_df$gene_name %in% changed_s1_s2_unique_gene_list),]
# only count gene once for each group
similar_df_unique_gene_df <- unique(similar_df_unique_gene_link[,c("se_merge_name","category","direction",
"gene_name","sample")])
changed_df_s1_s2_unique_gene_df <- unique(changed_df_s1_s2_unique_gene_link[,c("se_merge_name","category","direction",
"gene_name","sample")])
# count table
similar_df_unique_gene_count <- data.frame(unclass(table(similar_df_unique_gene_df$se_merge_name,
similar_df_unique_gene_df$sample)))
changed_df_s1_s2_unique_gene_count <- data.frame(unclass(table(changed_df_s1_s2_unique_gene_df$se_merge_name,
changed_df_s1_s2_unique_gene_df$sample)))
# add se category
similar_df_unique_gene_count$se_merge_name <- row.names(similar_df_unique_gene_count)
similar_df_unique_gene_count_temp <- unique(merge(similar_df_unique_gene_count,
similar_df_unique_gene_df[,c("se_merge_name","category","direction")],
by="se_merge_name"))
changed_df_s1_s2_unique_gene_count$se_merge_name <- row.names(changed_df_s1_s2_unique_gene_count)
changed_df_s1_s2_unique_gene_count_temp <- unique(merge(changed_df_s1_s2_unique_gene_count,
changed_df_s1_s2_unique_gene_df[,c("se_merge_name","category","direction")],
by="se_merge_name"))
#-------------------------------------------------------------------------------
# p3: venn diagram of SE category
#-------------------------------------------------------------------------------
#----
p3_plot_df <- list(similar = similar_gene_list,
changed = changed_gene_list)
p3 <- ggvenn(p3_plot_df,fill_color=c("burlywood","darkorchid4"))+
ggtitle("Similar vs. changed (overall,shorten,hollow,shifting)")
#-------------------------------------------------------------------------------
# p4: gene count SE category (SE range)
#-------------------------------------------------------------------------------
#----
p4_plot_df <- rbind(similar_df_unique_gene_count_temp,changed_df_s1_s2_unique_gene_count_temp)
# add minors
p4_plot_df$s2_s1 <- p4_plot_df$S2 - p4_plot_df$S1
# normalized to median(similar)
median_similar <- median(p4_plot_df$s2_s1[which(p4_plot_df$category=="Similar")])
p4_plot_df$s2_s1_norm <- p4_plot_df$s2_s1-median_similar
# reorder
p4_plot_df$category <- factor(p4_plot_df$category, levels = c("Similar","Overall",
"Shorten","Hollow","Shifting"))
# datapoint count
p4_data_count <- as.data.frame(unclass(table(p4_plot_df$category,p4_plot_df$direction)))
colnames(p4_data_count) <- colnames(table(p4_plot_df$category,p4_plot_df$direction))
p4_data_count$category <- rownames(p4_data_count)
# get p-value
shorten_p <- p4_plot_df[which(p4_plot_df$category != "Similar" &
p4_plot_df$category != "Shifting"),] %>%
group_by(category) %>%
t_test(s2_s1 ~ direction) %>%
add_significance("p")
shift_p <- p4_plot_df[which(p4_plot_df$category == "Shifting"),] %>%
group_by(category) %>%
t_test(s2_s1 ~ direction) %>%
add_significance("p")
stat.test <- rbind(shorten_p,shift_p)
# add position
stat.test <- stat.test %>%
add_xy_position(fun = "mean_sd", x = "category", dodge = 0.6)
stat.test$y.position <- c(20,18,12,19)
stat.test$xmin[4] <- 4.85
stat.test$xmax[4] <- 5.15
p4 <- ggplot(p4_plot_df,aes(x=category,y=s2_s1_norm,color=direction))+
geom_boxplot(position = position_dodge(width = 0.6),outlier.shape = NA,size=1,width=0.5)+
#stat_boxplot(geom ='errorbar',width = 0.5,size=1,position = position_dodge(width = 0.6))+
stat_pvalue_manual(
stat.test,  label = "p.signif", tip.length = 0.005)+
theme_bw()+
theme(plot.title = element_text(hjust = 0.5,size = 12),
axis.text=element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
geom_hline(yintercept=0,linetype="dashed",color="grey50")+
ylab("Difference of linked gene counts (S2-S1)")+
xlab("SE Category")+
ylim(c(-20,20))+
ggtitle("Linked gene counts of different SE categories")+
scale_color_manual(values = c('royalblue','red3','green3','grey60','gold'))
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/SEprofiler/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/K562_MCF7_new/")
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/SEprofiler/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/K562_MCF7_new/")
library(DESeq2)
# rose SE output_3 table
main_sample_1_r1 <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/K562_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_1_r2 <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/K562_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_2_r1 <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/MCF7_UOD_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_2_r2 <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/MCF7_UOD_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_df <- rbind(main_sample_1_r1,main_sample_2_r1,main_sample_1_r2,main_sample_2_r2)
colnames(main_df) <- c("CHROM","START","STOP","REGION_ID","Signal","STRAND")
blacklist_df <- read.table("~/Projects/super_enhancer/ENCFF356LFX_blacklist.bed",sep = '\t')
enhancer_s1_r1 <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/K562_1.bed",sep='\t')
enhancer_s1_r2 <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/K562_2.bed",sep='\t')
enhancer_s2_r1 <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/MCF7_UOD_1.bed",sep='\t')
enhancer_s2_r2 <- read.table("~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/MCF7_UOD_2.bed",sep='\t')
s1_r1_bam_path <- "~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/K562_1.bam"
s1_r2_bam_path <- "~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/K562_2.bam"
s2_r1_bam_path <- "~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/MCF7_UOD_1.bam"
s2_r2_bam_path <- "~/Projects/super_enhancer/se_diff_paper/ENCODE/encode_input/MCF7_UOD_2.bam"
pool_enhancer_df <- rbind(enhancer_s1_r1,enhancer_s1_r2,enhancer_s2_r1,enhancer_s2_r2)
colnames(pool_enhancer_df) <- c("chr", "start","end","name","score","strand",
"signalValue","pValue","qValue","peak")
system.time(se_profile_out <- SEprofile_2(se_in = main_df,e_df = pool_enhancer_df,
bl_file = blacklist_df,has_bl_file = T, permut = T,
s1_pair = F, s2_pair = F,bw = F,permut_type = "normal",
s1_r1_bam = s1_r1_bam_path,s1_r2_bam = s1_r2_bam_path,
s2_r1_bam = s2_r1_bam_path,s2_r2_bam = s2_r2_bam_path))
# # step_1: filter
# step_1_out <- SEfilter(main_df,bl_file = blacklist_df,has_bl_file = T)
#
# # step_2: deseq2
# step_2_out <- enhancerFoldchange(e_df = pool_enhancer_df,
#                                  se_df = step_1_out$se_merged_meta,
#                                  s1_r1_bam = s1_r1_bam_path,s1_r2_bam = s1_r2_bam_path,
#                                  s2_r1_bam = s2_r1_bam_path,s2_r2_bam = s2_r2_bam_path)
#
# # step_3: spline fit
# step_3_out <- SEfitspline_new(step_2_out$enhancer_deseq_result)
#
# # step_4: permutation
# #permutation pool
# sample_pool <- se_profile_out$e_in_se[,c("e_merge_name",
#                                            "S1_r1","S1_r2","S2_r1","S2_r2",
#                                            "se_merge_name")]
# # permutation
# step_4_out <- permut_spline_new(se_profile_out$se_fit,sample_pool,times = 5)
#
# # step_5: segment
# step_5_out <- SEpattern_demo(step_3_out$se_fit_df,step_3_out$spline_plot_df,
#                              step_4_out$cutoff)
#
# # step_6: category
# step_6_out <- SEcategory_demo_2(step_5_out$se_segment_percent,step_3_out$se_fit_df)
# step_6_out_2 <- SEcategory_demo_3(step_5_out$se_segment_percent,step_3_out$se_fit_df)
#
# # make output_3 RDS
# new_output_3 <- list(se_meta = step_1_out$se_merged_meta,
#                    se_deseq_out = step_2_out$enhancer_deseq_result,
#                    e_not_in_se = step_2_out$count_matrix_not_in_se[,c("e_merge_name",
#                                                                      "S1_r1","S1_r2","S2_r1","S2_r2",
#                                                                      "se_merge_name")],
#                    e_in_se = step_2_out$enhancer_deseq_result[,c("e_merge_name",
#                                              "S1_r1","S1_r2","S2_r1","S2_r2",
#                                              "se_merge_name")],
#                    se_fit = step_3_out$se_fit_df,
#                    pattern_plot_df = step_3_out$spline_plot_df,
#                    cutoff = step_4_out$cutoff,
#                    density_plot = step_4_out$density_plot,
#                    pattern_list = step_5_out$plots,
#                    se_seg = step_5_out$se_segment_percent,
#                    se_category = step_6_out$se_cat_rank,
#                    se_category_sensitive = step_6_out_2$se_cat_rank,
#                    boxplot =step_6_out$cat_boxplot,
#                    boxplot_sensitive =step_6_out_2$cat_boxplot
#                    )
saveRDS(se_profile_out, file = "output_3/1_se_out.rds")
write.table(se_profile_out$se_meta,file = "output_3/se_meta.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$se_category,file = "output_3/se_category.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$se_category_sensitive,file = "output_3/se_category_sensitive.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$se_fit,file = "output_3/enhancer_sp_fit.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$se_deseq_out,file = "output_3/enhancer_deseq_out.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$se_seg,file = "output_3/se_segment.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$cutoff,file = "output_3/cutoff.txt",sep='\t',
row.names = FALSE,quote = FALSE)
pdf(file = "output_3/boxplot.pdf")
se_profile_out$boxplot
dev.off()
pdf(file = "output_3/permutation.pdf")
se_profile_out$density_plot
dev.off()
pdf("output_3/MAplot.pdf")
plotMA(se_profile_out$lfc_shrink)
dev.off()
pattern_list <- se_profile_out$pattern_list
for (i in c(1:length(pattern_list))) {
# create out plot name
cat_dir <- se_profile_out$se_category$category[which(se_profile_out$se_category$se_merge_name==
pattern_list[[i]]$labels$title)]
pdf_name <- paste(gsub(" pattern", "",pattern_list[[i]]$labels$title),".pdf",sep="")
pdf_full_path <- paste0("output_3/patterns/",cat_dir,"/",pdf_name)
# save to pdf
pdf(file = pdf_full_path,width = 8, height = 4)
print(pattern_list[[i]])
dev.off()
}
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/SEprofiler/")
devtools::document()
devtools::load_all()
