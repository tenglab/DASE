# remove small density values
new_df <- slope_df[which(slope_df$density > 0.01),]
#new_df <- slope_df
# normalize x and y-axis
x_unit <- max(new_df$log2FC)-min(new_df$log2FC)
y_unit <- max(new_df$density)-min(new_df$density)
r_xy <- y_unit/x_unit
root_point_1 <- solveroot(slope_df$log2FC,slope_df$slope,y0 = r_xy)
root_point_2 <- solveroot(slope_df$log2FC,slope_df$slope,y0 = -r_xy)
fc_cutoff <- append(root_point_1,root_point_2)
fc_cutoff
ggplot(density_plot_df, aes(x = w_bs_spline,color = group))+
geom_density()+
geom_vline(xintercept=-0.68,linetype = "dashed",color="red")+
geom_vline(xintercept=0.80,linetype = "dashed",color="red")+
# geom_vline(xintercept=-1.87,linetype = "dashed",color="green")+
# geom_vline(xintercept=1.92,linetype = "dashed",color="green")+
# geom_vline(xintercept=-1.31,linetype = "dashed",color="blue")+
# geom_vline(xintercept=1.37,linetype = "dashed",color="blue")+
theme_classic()+
ggtitle("merged_enhancer Density")+
xlab("Weighted lowess fitted log2FC")+
ylab("Density")+
xlim(c(-5,5))+
theme(axis.text.x = element_text(angle = 0,hjust = 1),
plot.title = element_text(hjust = 0.5))
# exclude not in SE
density_plot_df <- rbind(temp_density_plot_df,temp_density_plot_df_all)
ggplot(density_plot_df, aes(x = w_bs_spline,color = group))+
geom_density()+
geom_vline(xintercept=-0.68,linetype = "dashed",color="red")+
geom_vline(xintercept=0.80,linetype = "dashed",color="red")+
# geom_vline(xintercept=-1.87,linetype = "dashed",color="green")+
# geom_vline(xintercept=1.92,linetype = "dashed",color="green")+
# geom_vline(xintercept=-1.31,linetype = "dashed",color="blue")+
# geom_vline(xintercept=1.37,linetype = "dashed",color="blue")+
theme_classic()+
ggtitle("merged_enhancer Density")+
xlab("Weighted lowess fitted log2FC")+
ylab("Density")+
xlim(c(-5,5))+
theme(axis.text.x = element_text(angle = 0,hjust = 1),
plot.title = element_text(hjust = 0.5))
# plot density with cutoff line
density_p <- ggplot(density_plot_df, aes(x = w_bs_spline,color = group))+
geom_density()+
geom_vline(xintercept=-0.68,linetype = "dashed",color="red")+
geom_vline(xintercept=0.80,linetype = "dashed",color="red")+
# geom_vline(xintercept=-1.87,linetype = "dashed",color="green")+
# geom_vline(xintercept=1.92,linetype = "dashed",color="green")+
# geom_vline(xintercept=-1.31,linetype = "dashed",color="blue")+
# geom_vline(xintercept=1.37,linetype = "dashed",color="blue")+
theme_classic()+
ggtitle("merged_enhancer Density")+
xlab("Weighted lowess fitted log2FC")+
ylab("Density")+
xlim(c(-5,5))+
theme(axis.text.x = element_text(angle = 0,hjust = 1),
plot.title = element_text(hjust = 0.5))
setwd("~/Projects/super_enhancer/derek_chip_seq/")
pdf(file = "permutation.pdf")
density_p
dev.off()
final_cutoff <- data.frame(Permutation = c(
"All enhancer"),
lower_cut = c(-0.68),
upper_cut = c(0.8))
write.table(final_cutoff,file = "derek_cutoff.txt",sep='\t',
row.names = FALSE,quote = FALSE)
setwd("~/Projects/super_enhancer/derek_chip_seq/")
library(DESeq2)
# rose SE output table
main_sample_1_r1 <- read.table("input/DMSO_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_1_r2 <- read.table("input/DMSO_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_2_r1 <- read.table("input/SR4835_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_2_r2 <- read.table("input/SR4835_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_df <- rbind(main_sample_1_r1,main_sample_2_r1,main_sample_1_r2,main_sample_2_r2)
colnames(main_df) <- c("CHROM","START","STOP","REGION_ID","Signal","STRAND")
blacklist_df <- read.table("../ENCFF356LFX_blacklist.bed",sep = '\t')
enhancer_s1_r1 <- read.table("input/DMSO_1_peaks.narrowPeak",sep='\t')
enhancer_s1_r2 <- read.table("input/DMSO_2_peaks.narrowPeak",sep='\t')
enhancer_s2_r1 <- read.table("input/SR4835_1_peaks.narrowPeak",sep='\t')
enhancer_s2_r2 <- read.table("input/SR4835_2_peaks.narrowPeak",sep='\t')
s1_r1_bam_path <- "input/DMSO_1.bam"
s1_r2_bam_path <- "input/DMSO_2.bam"
s2_r1_bam_path <- "input/SR4835_1.bam"
s2_r2_bam_path <- "input/SR4835_2.bam"
pool_enhancer_df <- rbind(enhancer_s1_r1,enhancer_s1_r2,enhancer_s2_r1,enhancer_s2_r2)
colnames(pool_enhancer_df) <- c("chr", "start","end","name","score","strand",
"signalValue","pValue","qValue","peak")
# with blacklist, with permutation (cutoff will defined by permutation)
system.time(se_profile_out <- SEprofile(se_in = main_df,e_df = pool_enhancer_df,
bl_file = blacklist_df,has_bl_file = T, permut = F,
s1_pair = F, s2_pair = F,bw = F,cutoff_v = c(-0.68,0.8),
s1_r1_bam = s1_r1_bam_path,s1_r2_bam = s1_r2_bam_path,
s2_r1_bam = s2_r1_bam_path,s2_r2_bam = s2_r2_bam_path))
saveRDS(se_profile_out, file = "output/derek_out.rds")
write.table(se_profile_out$se_meta,file = "output/se_meta.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$cate_rank,file = "output/se_cat_rank.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$se_segments,file = "output/se_segment.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$e_fit_fc,file = "output/enhancer_deseq_fit.txt",sep='\t',
row.names = FALSE,quote = FALSE)
pdf(file = "output/boxplot.pdf")
se_profile_out$box_plot
dev.off()
pdf("output/MAplot.pdf")
plotMA(se_profile_out$lfc_shrink)
dev.off()
# with blacklist, with permutation (cutoff will defined by permutation)
system.time(se_profile_out <- SEprofile(se_in = main_df,e_df = pool_enhancer_df,
bl_file = blacklist_df,has_bl_file = T, permut = F,
s1_pair = F, s2_pair = F,bw = F,cutoff_v = c(-0.5,0.5),
s1_r1_bam = s1_r1_bam_path,s1_r2_bam = s1_r2_bam_path,
s2_r1_bam = s2_r1_bam_path,s2_r2_bam = s2_r2_bam_path))
system.time(se_profile_out <- SEprofile(se_in = main_df,e_df = pool_enhancer_df,
bl_file = blacklist_df,has_bl_file = T, permut = F,
s1_pair = F, s2_pair = F,bw = F,cutoff_v = c(-0.6,0.6),
s1_r1_bam = s1_r1_bam_path,s1_r2_bam = s1_r2_bam_path,
s2_r1_bam = s2_r1_bam_path,s2_r2_bam = s2_r2_bam_path))
se_profile_out$box_plot
se_profile_out$cate_rank
test_cat <- se_profile_out$cate_rank
View(test_cat)
se_profile_out<- readRDS("output/derek_out.rds")
# write out pattern plots to pdf
dir.create("output/patterns")
pattern_list <- se_profile_out$pattern_plot
for (i in c(1:length(pattern_list))) {
# create out plot name
pdf_name <- paste(gsub(" pattern", "",pattern_list[[i]]$labels$title),".pdf",sep="")
pdf_full_path <- paste("output/patterns",pdf_name,sep="/")
# save to pdf
pdf(file = pdf_full_path,width = 8, height = 4)
print(pattern_list[[i]])
dev.off()
}
se_meta <- se_profile_out$se_meta
se_category <- se_profile_out$cate_rank
#------------------------------------------------------------------------------
# Deseq2 approach
#------------------------------------------------------------------------------
# set SAF format
fc_saf <- subset(se_meta, select=c(se_merge_name,chr:end))
fc_saf$Strand <- rep(".",nrow(se_meta))
colnames(fc_saf) <- c("GeneID","Chr","Start","End","Strand")
sample_1_fc<- featureCounts(files="input/DMSO_1.bam",annot.ext=fc_saf,
isGTFAnnotationFile = "SAF")
sample_1_fc_rep<- featureCounts(files="input/DMSO_2.bam",annot.ext=fc_saf,
isGTFAnnotationFile = "SAF")
sample_2_fc<- featureCounts(files="input/SR4835_1.bam",annot.ext=fc_saf,
isGTFAnnotationFile = "SAF")
sample_2_fc_rep<- featureCounts(files="input/SR4835_2.bam",annot.ext=fc_saf,
isGTFAnnotationFile = "SAF")
# DESeq2 fold-change
count_matrix <- as.data.frame(cbind(sample_1_fc$counts,sample_1_fc_rep$counts,
sample_2_fc$counts,sample_2_fc_rep$counts))
colnames(count_matrix) <- c("DMSO_1","DMSO_2","SR4835_1","SR4835_2")
sample_data <- data.frame(row.names = c("DMSO_1","DMSO_2",
"SR4835_1","SR4835_2"),
condition = c("DMSO","DMSO","SR4835","SR4835"))
dds <- DESeqDataSetFromMatrix(countData = count_matrix,
colData = sample_data,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds)
# save raw counts and normalized counts
raw_count <- counts(dds)
normalized_count <- counts(dds,normalized=TRUE)
colnames(normalized_count) <- c("DMSO_1_norm","DMSO_2_norm","SR4835_1_norm","SR4835_2_norm")
resLFC <- lfcShrink(dds, coef="condition_SR4835_vs_DMSO", type="apeglm")
# make output_MA
deseq_output_MA <- data.frame()
deseq_output_MA <- as.data.frame(cbind(raw_count,normalized_count,resLFC))
new_deseq_out <- setDT(deseq_output_MA, keep.rownames = "se_merge_name")[]
# mark significant and non-significant
new_deseq_out$deseq_cat <- NA
sig_df <- new_deseq_out[which(new_deseq_out$padj <= 0.1),]
non_sig_df <- new_deseq_out[which(new_deseq_out$padj > 0.1),]
sig_df$deseq_cat <-rep("significant",nrow(sig_df))
non_sig_df$deseq_cat <-rep("non-significant",nrow(non_sig_df))
final_deseq_out <- rbind(sig_df,non_sig_df)
#------------------------------------------------------------------------------
# binary compare
#------------------------------------------------------------------------------
rose_1_r1 <- read.table("input/DMSO_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
rose_1_r1$sample <- rep("DMSO",nrow(rose_1_r1))
rose_1_r2 <- read.table("input/DMSO_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
rose_1_r2$sample <- rep("DMSO",nrow(rose_1_r2))
rose_2_r1 <- read.table("input/SR4835_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
rose_2_r1$sample <- rep("BC2",nrow(rose_2_r1))
rose_2_r2 <- read.table("input/SR4835_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
rose_2_r2$sample <- rep("BC2",nrow(rose_2_r2))
pool_rose <- rbind(rose_1_r1,rose_1_r2,rose_2_r1,rose_2_r2)
colnames(pool_rose) <- c("CHROM","START","STOP","REGION_ID","Signal","STRAND","sample")
binary_out <- data.frame()
for (i in c(1:nrow(se_meta))) {
filter_se <- pool_rose[which(pool_rose$CHROM == se_meta$chr[i] &
pool_rose$START >= se_meta$start[i] &
pool_rose$STOP <= se_meta$end[i]),]
temp_binary <-data.frame(se_merge_name = se_meta$se_merge_name[i],
sample_n = length(unique(filter_se$sample)),
binary_cate = NA)
if (temp_binary$sample_n == 1) {
temp_binary$binary_cate <- "significant"
} else {
temp_binary$binary_cate <- "non-significant"
}
binary_out <- rbind(binary_out,temp_binary)
}
merge_out_df <- merge(final_deseq_out,binary_out, by="se_merge_name")
final_merge_out_df <- merge(merge_out_df,se_category,by="se_merge_name")
write.table(final_merge_out_df,file = "output_MA/se_compare_result.txt",sep='\t',
row.names = FALSE,quote = FALSE)
# count each category
se_cat <- table(final_merge_out_df$category)
deseq_cat <- table(final_merge_out_df$deseq_cat)
binary_cat <- table(final_merge_out_df$binary_cate)
# plot barchart
# reorder
final_merge_out_df$category <- factor(final_merge_out_df$category, levels = c("Similar","Strengthen/weaken",
"Shorten","Shifting","V_shape",
"Other"))
pdf(file = "output/deseq_barplot.pdf")
ggplot(data=final_merge_out_df, aes(x=category,fill=deseq_cat,))+
geom_bar()+
theme_classic()+
theme(axis.text.x = element_text(angle = 45,hjust = 1),
text = element_text(size=12),
plot.title = element_text(hjust = 0.5))+
ggtitle("SE types with differential results (p<0.1)")+
scale_fill_manual(values = c('grey50','red3'))+
guides(fill=guide_legend(title="Significance_category"))
dev.off()
pdf(file = "output/binary_barplot.pdf")
ggplot(data=final_merge_out_df, aes(x=category,fill=binary_cate,))+
geom_bar()+
theme_classic()+
theme(axis.text.x = element_text(angle = 45,hjust = 1),
text = element_text(size=12),
plot.title = element_text(hjust = 0.5))+
ggtitle("SE types with binary results")+
scale_fill_manual(values = c('grey50','red3'))+
guides(fill=guide_legend(title="Significance_category"))
dev.off()
write.table(final_merge_out_df,file = "output/se_compare_result.txt",sep='\t',
row.names = FALSE,quote = FALSE)
se_cat <- table(final_merge_out_df$category)
deseq_cat <- table(final_merge_out_df$deseq_cat)
binary_cat <- table(final_merge_out_df$binary_cate)
se_cat
deseq_cat
binary_cat
deseq_cat <- final_merge_out_df[which(final_merge_out_df$deseq_cat=="significant"),]
nrow(deseq_cat)
table(deseq_cat$category)
deseq_cat <- final_merge_out_df[which(final_merge_out_df$binary_cate=="significant"),]
table(deseq_cat$category)
deseq_cat <- final_merge_out_df[which(final_merge_out_df$binary_cate=="non-significant"),]
table(deseq_cat$category)
setwd("~/Projects/super_enhancer/se_diff_paper/SEprofiler/")
devtools
devtools::load_all()
setwd("~/Projects/super_enhancer/derek_chip_seq/")
library(DESeq2)
# rose SE output table
main_sample_1_r1 <- read.table("input/DMSO_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_1_r2 <- read.table("input/DMSO_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_2_r1 <- read.table("input/SR4835_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_2_r2 <- read.table("input/SR4835_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_df <- rbind(main_sample_1_r1,main_sample_2_r1,main_sample_1_r2,main_sample_2_r2)
colnames(main_df) <- c("CHROM","START","STOP","REGION_ID","Signal","STRAND")
blacklist_df <- read.table("../ENCFF356LFX_blacklist.bed",sep = '\t')
enhancer_s1_r1 <- read.table("input/DMSO_1_peaks.narrowPeak",sep='\t')
enhancer_s1_r2 <- read.table("input/DMSO_2_peaks.narrowPeak",sep='\t')
enhancer_s2_r1 <- read.table("input/SR4835_1_peaks.narrowPeak",sep='\t')
enhancer_s2_r2 <- read.table("input/SR4835_2_peaks.narrowPeak",sep='\t')
s1_r1_bam_path <- "input/DMSO_1.bam"
s1_r2_bam_path <- "input/DMSO_2.bam"
s2_r1_bam_path <- "input/SR4835_1.bam"
s2_r2_bam_path <- "input/SR4835_2.bam"
pool_enhancer_df <- rbind(enhancer_s1_r1,enhancer_s1_r2,enhancer_s2_r1,enhancer_s2_r2)
colnames(pool_enhancer_df) <- c("chr", "start","end","name","score","strand",
"signalValue","pValue","qValue","peak")
# with blacklist, with permutation (cutoff will defined by permutation)
system.time(se_profile_out <- SEprofile(se_in = main_df,e_df = pool_enhancer_df,
bl_file = blacklist_df,has_bl_file = T, permut = F,
s1_pair = F, s2_pair = F,bw = F,cutoff_v = c(-0.68,0.8),
s1_r1_bam = s1_r1_bam_path,s1_r2_bam = s1_r2_bam_path,
s2_r1_bam = s2_r1_bam_path,s2_r2_bam = s2_r2_bam_path))
saveRDS(se_profile_out, file = "output_2/derek_out.rds")
write.table(se_profile_out$se_meta,file = "output_2/se_meta.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$cate_rank,file = "output_2/se_cat_rank.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$se_segments,file = "output_2/se_segment.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$e_fit_fc,file = "output_2/enhancer_deseq_fit.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$fc_cutoff,file = "output_2/cutoff.txt",sep='\t',
row.names = FALSE,quote = FALSE)
pdf(file = "output_2/boxplot.pdf")
se_profile_out$box_plot
dev.off()
pdf(file = "output_2/permutation.pdf")
se_profile_out$permut_plot
dev.off()
pdf("output_2/MAplot.pdf")
plotMA(se_profile_out$lfc_shrink)
dev.off()
# write out pattern plots to pdf
dir.create("output_2/patterns")
pattern_list <- se_profile_out$pattern_plot
for (i in c(1:length(pattern_list))) {
# create out plot name
pdf_name <- paste(gsub(" pattern", "",pattern_list[[i]]$labels$title),".pdf",sep="")
pdf_full_path <- paste("output_2/patterns",pdf_name,sep="/")
# save to pdf
pdf(file = pdf_full_path,width = 8, height = 4)
print(pattern_list[[i]])
dev.off()
}
# set work directory
setwd("~/Projects/super_enhancer/derek_chip_seq/")
library(tidyr)
library(plyr)
library(dplyr)
library(tibble)
library(ggplot2)
library(scales)
library(data.table)
library(GenomicRanges)
library(DESeq2)
library(Rsubread)
library(apeglm)
se_profile_out<- readRDS("output_2/derek_out.rds")
se_meta <- se_profile_out$se_meta
se_category <- se_profile_out$cate_rank
#------------------------------------------------------------------------------
# Deseq2 approach
#------------------------------------------------------------------------------
# set SAF format
fc_saf <- subset(se_meta, select=c(se_merge_name,chr:end))
fc_saf$Strand <- rep(".",nrow(se_meta))
colnames(fc_saf) <- c("GeneID","Chr","Start","End","Strand")
sample_1_fc<- featureCounts(files="input/DMSO_1.bam",annot.ext=fc_saf,
isGTFAnnotationFile = "SAF")
sample_1_fc_rep<- featureCounts(files="input/DMSO_2.bam",annot.ext=fc_saf,
isGTFAnnotationFile = "SAF")
sample_2_fc<- featureCounts(files="input/SR4835_1.bam",annot.ext=fc_saf,
isGTFAnnotationFile = "SAF")
sample_2_fc_rep<- featureCounts(files="input/SR4835_2.bam",annot.ext=fc_saf,
isGTFAnnotationFile = "SAF")
# DESeq2 fold-change
count_matrix <- as.data.frame(cbind(sample_1_fc$counts,sample_1_fc_rep$counts,
sample_2_fc$counts,sample_2_fc_rep$counts))
colnames(count_matrix) <- c("DMSO_1","DMSO_2","SR4835_1","SR4835_2")
sample_data <- data.frame(row.names = c("DMSO_1","DMSO_2",
"SR4835_1","SR4835_2"),
condition = c("DMSO","DMSO","SR4835","SR4835"))
dds <- DESeqDataSetFromMatrix(countData = count_matrix,
colData = sample_data,
design = ~ condition)
dds <- DESeq(dds)
res <- results(dds)
# save raw counts and normalized counts
raw_count <- counts(dds)
normalized_count <- counts(dds,normalized=TRUE)
colnames(normalized_count) <- c("DMSO_1_norm","DMSO_2_norm","SR4835_1_norm","SR4835_2_norm")
resLFC <- lfcShrink(dds, coef="condition_SR4835_vs_DMSO", type="apeglm")
# make output_MA
deseq_output_MA <- data.frame()
deseq_output_MA <- as.data.frame(cbind(raw_count,normalized_count,resLFC))
new_deseq_out <- setDT(deseq_output_MA, keep.rownames = "se_merge_name")[]
# mark significant and non-significant
new_deseq_out$deseq_cat <- NA
sig_df <- new_deseq_out[which(new_deseq_out$padj <= 0.1),]
non_sig_df <- new_deseq_out[which(new_deseq_out$padj > 0.1),]
sig_df$deseq_cat <-rep("significant",nrow(sig_df))
non_sig_df$deseq_cat <-rep("non-significant",nrow(non_sig_df))
final_deseq_out <- rbind(sig_df,non_sig_df)
#------------------------------------------------------------------------------
# binary compare
#------------------------------------------------------------------------------
rose_1_r1 <- read.table("input/DMSO_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
rose_1_r1$sample <- rep("DMSO",nrow(rose_1_r1))
rose_1_r2 <- read.table("input/DMSO_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
rose_1_r2$sample <- rep("DMSO",nrow(rose_1_r2))
rose_2_r1 <- read.table("input/SR4835_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
rose_2_r1$sample <- rep("BC2",nrow(rose_2_r1))
rose_2_r2 <- read.table("input/SR4835_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
rose_2_r2$sample <- rep("BC2",nrow(rose_2_r2))
pool_rose <- rbind(rose_1_r1,rose_1_r2,rose_2_r1,rose_2_r2)
colnames(pool_rose) <- c("CHROM","START","STOP","REGION_ID","Signal","STRAND","sample")
binary_out <- data.frame()
for (i in c(1:nrow(se_meta))) {
filter_se <- pool_rose[which(pool_rose$CHROM == se_meta$chr[i] &
pool_rose$START >= se_meta$start[i] &
pool_rose$STOP <= se_meta$end[i]),]
temp_binary <-data.frame(se_merge_name = se_meta$se_merge_name[i],
sample_n = length(unique(filter_se$sample)),
binary_cate = NA)
if (temp_binary$sample_n == 1) {
temp_binary$binary_cate <- "significant"
} else {
temp_binary$binary_cate <- "non-significant"
}
binary_out <- rbind(binary_out,temp_binary)
}
merge_out_df <- merge(final_deseq_out,binary_out, by="se_merge_name")
final_merge_out_df <- merge(merge_out_df,se_category,by="se_merge_name")
write.table(final_merge_out_df,file = "output_2/se_compare_result.txt",sep='\t',
row.names = FALSE,quote = FALSE)
# plot barchart
# reorder
final_merge_out_df$category <- factor(final_merge_out_df$category, levels = c("Similar","Strengthen/weaken",
"Shorten","Shifting","V_shape",
"Other"))
pdf(file = "output_2/deseq_barplot.pdf")
ggplot(data=final_merge_out_df, aes(x=category,fill=deseq_cat,))+
geom_bar()+
theme_classic()+
theme(axis.text.x = element_text(angle = 45,hjust = 1),
text = element_text(size=12),
plot.title = element_text(hjust = 0.5))+
ggtitle("SE types with differential results (p<0.1)")+
scale_fill_manual(values = c('grey50','red3'))+
guides(fill=guide_legend(title="Significance_category"))
dev.off()
pdf(file = "output_2/binary_barplot.pdf")
ggplot(data=final_merge_out_df, aes(x=category,fill=binary_cate,))+
geom_bar()+
theme_classic()+
theme(axis.text.x = element_text(angle = 45,hjust = 1),
text = element_text(size=12),
plot.title = element_text(hjust = 0.5))+
ggtitle("SE types with binary results")+
scale_fill_manual(values = c('grey50','red3'))+
guides(fill=guide_legend(title="Significance_category"))
dev.off()
setwd("~/Projects/super_enhancer/se_diff_paper/SEprofiler/")
devtools::load_all()
seg <- se_profile_out$se_segments
hist(seg$seg_percent)
hist(seg$seg_percent,freq = T)
hist(seg$seg_percent,breaks = 50)
hist(seg$seg_percent,breaks = 100)
hist(seg$seg_percent,breaks = 20)
devtools::load_all()
setwd("~/Projects/super_enhancer/derek_chip_seq/")
library(DESeq2)
# rose SE output table
main_sample_1_r1 <- read.table("input/DMSO_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_1_r2 <- read.table("input/DMSO_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_2_r1 <- read.table("input/SR4835_1_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_sample_2_r2 <- read.table("input/SR4835_2_peaks_Gateway_SuperEnhancers.bed",sep='\t', header =F)
main_df <- rbind(main_sample_1_r1,main_sample_2_r1,main_sample_1_r2,main_sample_2_r2)
colnames(main_df) <- c("CHROM","START","STOP","REGION_ID","Signal","STRAND")
blacklist_df <- read.table("../ENCFF356LFX_blacklist.bed",sep = '\t')
enhancer_s1_r1 <- read.table("input/DMSO_1_peaks.narrowPeak",sep='\t')
enhancer_s1_r2 <- read.table("input/DMSO_2_peaks.narrowPeak",sep='\t')
enhancer_s2_r1 <- read.table("input/SR4835_1_peaks.narrowPeak",sep='\t')
enhancer_s2_r2 <- read.table("input/SR4835_2_peaks.narrowPeak",sep='\t')
s1_r1_bam_path <- "input/DMSO_1.bam"
s1_r2_bam_path <- "input/DMSO_2.bam"
s2_r1_bam_path <- "input/SR4835_1.bam"
s2_r2_bam_path <- "input/SR4835_2.bam"
pool_enhancer_df <- rbind(enhancer_s1_r1,enhancer_s1_r2,enhancer_s2_r1,enhancer_s2_r2)
colnames(pool_enhancer_df) <- c("chr", "start","end","name","score","strand",
"signalValue","pValue","qValue","peak")
# with blacklist, with permutation (cutoff will defined by permutation)
system.time(se_profile_out <- SEprofile(se_in = main_df,e_df = pool_enhancer_df,
bl_file = blacklist_df,has_bl_file = T, permut = F,
s1_pair = F, s2_pair = F,bw = F,cutoff_v = c(-0.68,0.8),
s1_r1_bam = s1_r1_bam_path,s1_r2_bam = s1_r2_bam_path,
s2_r1_bam = s2_r1_bam_path,s2_r2_bam = s2_r2_bam_path))
saveRDS(se_profile_out, file = "output_2/derek_out.rds")
write.table(se_profile_out$se_meta,file = "output_2/se_meta.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$cate_rank,file = "output_2/se_cat_rank.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$se_segments,file = "output_2/se_segment.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$e_fit_fc,file = "output_2/enhancer_deseq_fit.txt",sep='\t',
row.names = FALSE,quote = FALSE)
write.table(se_profile_out$fc_cutoff,file = "output_2/cutoff.txt",sep='\t',
row.names = FALSE,quote = FALSE)
pdf(file = "output_2/boxplot.pdf")
se_profile_out$box_plot
dev.off()
pdf(file = "output_2/permutation.pdf")
se_profile_out$permut_plot
dev.off()
pdf("output_2/MAplot.pdf")
plotMA(se_profile_out$lfc_shrink)
dev.off()
# write out pattern plots to pdf
dir.create("output_2/patterns")
pattern_list <- se_profile_out$pattern_plot
for (i in c(1:length(pattern_list))) {
# create out plot name
pdf_name <- paste(gsub(" pattern", "",pattern_list[[i]]$labels$title),".pdf",sep="")
pdf_full_path <- paste("output_2/patterns",pdf_name,sep="/")
# save to pdf
pdf(file = pdf_full_path,width = 8, height = 4)
print(pattern_list[[i]])
dev.off()
}
setwd("~/Projects/super_enhancer/se_diff_paper/SEprofiler/")
devtools::load_all()
