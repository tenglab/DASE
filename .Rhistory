resLFC <- lfcShrink(dds, coef="condition_C2_vs_C1", type="apeglm")
new_resLFC <-setDT(as.data.frame(resLFC), keep.rownames = "e_merge_name")[]
# make final output
temp_shuffle_count_df_temp <- merge(temp_permut,normalized_count,by="e_merge_name")
temp_shuffle_count_df <- merge(temp_shuffle_count_df_temp,new_resLFC,by="e_merge_name")
# add max_mean
temp_shuffle_count_df$C1_mean <- (temp_shuffle_count_df$S1_r1_norm+temp_shuffle_count_df$S1_r2_norm)/2
temp_shuffle_count_df$C2_mean <- (temp_shuffle_count_df$S2_r1_norm+temp_shuffle_count_df$S2_r2_norm)/2
temp_shuffle_count_df$max_mean <- apply(temp_shuffle_count_df[,c('C1_mean','C2_mean')],1,FUN=max)
# get new fitted value
permut_fit <- data.frame()
se_name <- unique(temp_shuffle_count_df$se_merge_name)
for (k in c(1:length(se_name))) {
# print step information
# if(k %% 100==0) {
#   # Print on the screen some message
#   print(paste0("SE: ",k))
# }
shuffle_enhancer <- temp_shuffle_count_df[which(temp_shuffle_count_df$se_merge_name == se_name[k]),]
shuffle_enhancer$percent <- shuffle_enhancer$max_mean/sum(shuffle_enhancer$max_mean)*100
shuffle_enhancer <- shuffle_enhancer[order(-shuffle_enhancer$percent)]
shuffle_enhancer$cumsum <- cumsum(shuffle_enhancer$percent)
# check if only 1 enhancer
if (nrow(shuffle_enhancer) == 1) {
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=2),
data = shuffle_enhancer,
weights = max_mean)
shuffle_enhancer$permut_spline_bs <- spline_bs_fit$fitted.values
} else {
# get df based on number of enhancer whose cumsum is > 95%
n_top <- min(which(shuffle_enhancer$cumsum > 95))
# different df based on n_top
if (n_top <= 4) {
# df=2
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=2,
Boundary.knots = c(min(width_mid)-5,max(width_mid)+5)),
data = shuffle_enhancer,
weights = max_mean)
} else if (n_top >= 6) {
# df=4
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=4,
Boundary.knots = c(min(width_mid)-5,max(width_mid)+5)),
data = shuffle_enhancer,
weights = max_mean)
} else {
# df=3
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=3,
Boundary.knots = c(min(width_mid)-5,max(width_mid)+5)),
data = shuffle_enhancer,
weights = max_mean)
}
# save fitted.values for permutation
shuffle_enhancer$permut_spline_bs <- spline_bs_fit$fitted.values
}
permut_fit <- rbind(permut_fit,shuffle_enhancer)
}
temp_shuffle_count_df
temp_shuffle_count_df
# add max_mean
norm_start <-  5+c1_n+c2_n+1
temp_shuffle_count_df[,norm_start:(norm_start+c1_n-1)]
colnames(temp_shuffle_count_df)
# add max_mean
norm_start <-  1+c1_n+c2_n+1
temp_shuffle_count_df[,norm_start:(norm_start+c1_n-1)]
# add max_mean
norm_start <-  1+c1_n+c2_n+3
temp_shuffle_count_df[,norm_start:(norm_start+c1_n-1)]
temp_shuffle_count_df[,(norm_start+c1_n):(norm_start+c1_n+c2_n-1)]
temp_shuffle_count_df$C1_mean <- rowMeans(temp_shuffle_count_df[,norm_start:(norm_start+c1_n-1)])
temp_shuffle_count_df$C2_mean <- rowMeans(temp_shuffle_count_df[,(norm_start+c1_n):(norm_start+c1_n+c2_n-1)])
temp_shuffle_count_df$max_mean <- apply(temp_shuffle_count_df[,c('C1_mean','C2_mean')],1,FUN=max)
# get new fitted value
permut_fit <- data.frame()
se_name <- unique(temp_shuffle_count_df$se_merge_name)
for (k in c(1:length(se_name))) {
# print step information
# if(k %% 100==0) {
#   # Print on the screen some message
#   print(paste0("SE: ",k))
# }
shuffle_enhancer <- temp_shuffle_count_df[which(temp_shuffle_count_df$se_merge_name == se_name[k]),]
shuffle_enhancer$percent <- shuffle_enhancer$max_mean/sum(shuffle_enhancer$max_mean)*100
shuffle_enhancer <- shuffle_enhancer[order(-shuffle_enhancer$percent)]
shuffle_enhancer$cumsum <- cumsum(shuffle_enhancer$percent)
# check if only 1 enhancer
if (nrow(shuffle_enhancer) == 1) {
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=2),
data = shuffle_enhancer,
weights = max_mean)
shuffle_enhancer$permut_spline_bs <- spline_bs_fit$fitted.values
} else {
# get df based on number of enhancer whose cumsum is > 95%
n_top <- min(which(shuffle_enhancer$cumsum > 95))
# different df based on n_top
if (n_top <= 4) {
# df=2
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=2,
Boundary.knots = c(min(width_mid)-5,max(width_mid)+5)),
data = shuffle_enhancer,
weights = max_mean)
} else if (n_top >= 6) {
# df=4
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=4,
Boundary.knots = c(min(width_mid)-5,max(width_mid)+5)),
data = shuffle_enhancer,
weights = max_mean)
} else {
# df=3
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=3,
Boundary.knots = c(min(width_mid)-5,max(width_mid)+5)),
data = shuffle_enhancer,
weights = max_mean)
}
# save fitted.values for permutation
shuffle_enhancer$permut_spline_bs <- spline_bs_fit$fitted.values
}
permut_fit <- rbind(permut_fit,shuffle_enhancer)
}
permut_fit
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/DASE_test/")
sample_pool <- subset(step_2_out$enhancer_deseq_result,select=c('e_merge_name',colnames(spline_fit_out)[6:(5+c1_n+c2_n)],
'se_merge_name'))
# permutation
step_4_out <- SEpermut(step_3_out$se_fit_df,sample_pool,times=1)
step_4_out
spline_bs_fit <- lm(log2FoldChange~ns(width_mid,
degree=2),
data = shuffle_enhancer,
weights = max_mean)
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/DASE_test/")
# permutation
step_4_out <- SEpermut_ns(step_3_out$se_fit_df,sample_pool,times=1,c1_n=3,c2_n=4)
step_4_out$density_plot
# permutation
step_4_out <- SEpermut_bs(step_3_out$se_fit_df,sample_pool,times=1,c1_n=3,c2_n=4)
step_4_out$density_plot
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/DASE_test/")
# permutation
step_4_out <- SEpermut_smooth(step_3_out$se_fit_df,sample_pool,times=1,c1_n=3,c2_n=4)
col_list <- c('e_merge_name',colnames(spline_fit_out)[6:(5+c1_n+c2_n)],
'width_mid','se_merge_name')
temp_permut <- subset(spline_fit_out,select=col_list)
for (si in 2:(1+c1_n+c2_n)) {
temp_permut[[si]] <- sample(sample_pool[[si]],size=nrow(temp_permut))
}
# DESeq2 fold-change
# make count matrix
count_matrix <- as.data.frame(subset(temp_permut,select=c(colnames(spline_fit_out)[6:(5+c1_n+c2_n)])))
rownames(count_matrix) <- temp_permut$e_merge_name
# remove row.sum = 0
no_zero_count_matrix <- count_matrix[rowSums(count_matrix)>0,]
sample_data <- data.frame(row.names = colnames(no_zero_count_matrix),
condition = c(rep("C1",c1_n),rep("C2",c2_n)))
dds <- DESeqDataSetFromMatrix(countData = no_zero_count_matrix,
colData = sample_data,
design = ~ condition)
# calculate fold change
dds <- DESeq(dds)
res <- results(dds)
# save raw counts and normalized counts
normalized_count <- counts(dds,normalized=TRUE)
colnames(normalized_count) <- paste0(colnames(normalized_count),"_norm")
normalized_count <- setDT(as.data.frame(normalized_count), keep.rownames = "e_merge_name")[]
# lfc shrinking
resLFC <- lfcShrink(dds, coef="condition_C2_vs_C1", type="apeglm")
new_resLFC <-setDT(as.data.frame(resLFC), keep.rownames = "e_merge_name")[]
# make final output
temp_shuffle_count_df_temp <- merge(temp_permut,normalized_count,by="e_merge_name")
temp_shuffle_count_df <- merge(temp_shuffle_count_df_temp,new_resLFC,by="e_merge_name")
# add max_mean
norm_start <-  1+c1_n+c2_n+3
temp_shuffle_count_df$C1_mean <- rowMeans(temp_shuffle_count_df[,norm_start:(norm_start+c1_n-1)])
temp_shuffle_count_df$C2_mean <- rowMeans(temp_shuffle_count_df[,(norm_start+c1_n):(norm_start+c1_n+c2_n-1)])
temp_shuffle_count_df$max_mean <- apply(temp_shuffle_count_df[,c('C1_mean','C2_mean')],1,FUN=max)
# get new fitted value
permut_fit <- data.frame()
se_name <- unique(temp_shuffle_count_df$se_merge_name)
k=1
shuffle_enhancer <- temp_shuffle_count_df[which(temp_shuffle_count_df$se_merge_name == se_name[k]),]
shuffle_enhancer$percent <- shuffle_enhancer$max_mean/sum(shuffle_enhancer$max_mean)*100
shuffle_enhancer <- shuffle_enhancer[order(-shuffle_enhancer$percent)]
shuffle_enhancer$cumsum <- cumsum(shuffle_enhancer$percent)
nrow(shuffle_enhancer)
# get df based on number of enhancer whose cumsum is > 95%
n_top <- min(which(shuffle_enhancer$cumsum > 95))
# different df based on n_top
if (n_top <= 4) {
# df=2
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=2,
Boundary.knots = c(min(width_mid)-5,max(width_mid)+5)),
data = shuffle_enhancer,
weights = max_mean)
} else if (n_top >= 5) {
# df=4
spline_bs_fit <- smooth.spline(x=shuffle_enhancer$width_mid,y=shuffle_enhancer$log2FoldChange,
w=shuffle_enhancer$max_mean,
df=4)
# save fitted.values for permutation
shuffle_enhancer$permut_spline_bs <- spline_bs_fit$y
}
shuffle_enhancer
for (k in c(1:length(se_name))) {
# print step information
# if(k %% 100==0) {
#   # Print on the screen some message
#   print(paste0("SE: ",k))
# }
shuffle_enhancer <- temp_shuffle_count_df[which(temp_shuffle_count_df$se_merge_name == se_name[k]),]
shuffle_enhancer$percent <- shuffle_enhancer$max_mean/sum(shuffle_enhancer$max_mean)*100
shuffle_enhancer <- shuffle_enhancer[order(-shuffle_enhancer$percent)]
shuffle_enhancer$cumsum <- cumsum(shuffle_enhancer$percent)
# check if only 1 enhancer
if (nrow(shuffle_enhancer) == 1) {
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=2),
data = shuffle_enhancer,
weights = max_mean)
shuffle_enhancer$permut_spline_bs <- spline_bs_fit$fitted.values
} else {
# get df based on number of enhancer whose cumsum is > 95%
n_top <- min(which(shuffle_enhancer$cumsum > 95))
# different df based on n_top
if (n_top <= 4) {
# df=2
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=2,
Boundary.knots = c(min(width_mid)-5,max(width_mid)+5)),
data = shuffle_enhancer,
weights = max_mean)
} else if (n_top >= 5) {
# df=4
spline_bs_fit <- smooth.spline(x=shuffle_enhancer$width_mid,y=shuffle_enhancer$log2FoldChange,
w=shuffle_enhancer$max_mean,
df=4)
# save fitted.values for permutation
shuffle_enhancer$permut_spline_bs <- spline_bs_fit$y
}
}
permut_fit <- rbind(permut_fit,shuffle_enhancer)
}
k
# print step information
# if(k %% 100==0) {
#   # Print on the screen some message
#   print(paste0("SE: ",k))
# }
shuffle_enhancer <- temp_shuffle_count_df[which(temp_shuffle_count_df$se_merge_name == se_name[k]),]
shuffle_enhancer$percent <- shuffle_enhancer$max_mean/sum(shuffle_enhancer$max_mean)*100
shuffle_enhancer <- shuffle_enhancer[order(-shuffle_enhancer$percent)]
shuffle_enhancer$cumsum <- cumsum(shuffle_enhancer$percent)
# check if only 1 enhancer
if (nrow(shuffle_enhancer) == 1) {
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=2),
data = shuffle_enhancer,
weights = max_mean)
shuffle_enhancer$permut_spline_bs <- spline_bs_fit$fitted.values
} else {
# get df based on number of enhancer whose cumsum is > 95%
n_top <- min(which(shuffle_enhancer$cumsum > 95))
# different df based on n_top
if (n_top <= 4) {
# df=2
spline_bs_fit <- lm(log2FoldChange~bs(width_mid,
degree=2,
Boundary.knots = c(min(width_mid)-5,max(width_mid)+5)),
data = shuffle_enhancer,
weights = max_mean)
} else if (n_top >= 5) {
# df=4
spline_bs_fit <- smooth.spline(x=shuffle_enhancer$width_mid,y=shuffle_enhancer$log2FoldChange,
w=shuffle_enhancer$max_mean,
df=4)
# save fitted.values for permutation
shuffle_enhancer$permut_spline_bs <- spline_bs_fit$y
}
}
shuffle_enhancer
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/DASE_test/")
# permutation
step_4_out <- SEpermut_smooth(step_3_out$se_fit_df,sample_pool,times=1,c1_n=3,c2_n=4)
step_4_out$cutoff
# # step_5: segment
step_5_out <- SEpattern(step_3_out$se_fit_df,step_3_out$spline_plot_df,
step_4_out$cutoff)
# step_6: category
step_6_out <- SEcategory_demo_2(step_5_out$se_segment_percent,step_3_out$se_fit)
colnames(step_2_out$enhancer_deseq_result)
colnames(step_2_out$enhancer_deseq_result)[6:(5+c1_n+c2_n)]
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/DASE_test/")
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/DASE_test/")
# test_1<- SEfilter(se_in=se_region)
#
#
system.time(se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1="K562_1_chr21.bam,K562_2_chr21.bam,K562_3_chr21.bam",
condition_2="MCF7_1_chr21.bam,MCF7_2_chr21.bam,MCF7_3_chr21.bam,MCF7_4_chr21.bam",
c1_pair="F,F,F",
c2_pair="F,F,F,F"))
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/DASE_test/")
# test_1<- SEfilter(se_in=se_region)
#
#
system.time(se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1="K562_1_chr21.bam,K562_2_chr21.bam,K562_3_chr21.bam",
condition_2="MCF7_1_chr21.bam,MCF7_2_chr21.bam,MCF7_3_chr21.bam,MCF7_4_chr21.bam",
c1_pair="F,F,F",
c2_pair="F,F,F,F"))
se_profile_out$density_plot
se_profile_out$cutoff
# test_1<- SEfilter(se_in=se_region)
#
#
system.time(se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1="K562_1_chr21.bam,K562_2_chr21.bam,K562_3_chr21.bam",
condition_2="MCF7_1_chr21.bam,MCF7_2_chr21.bam,MCF7_3_chr21.bam,MCF7_4_chr21.bam",
c1_pair="F,F,F",
c2_pair="F,F,F,F",
times=4,
spline_fun = "ns"))
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/DASE_test/")
# test_1<- SEfilter(se_in=se_region)
#
#
system.time(se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1="K562_1_chr21.bam,K562_2_chr21.bam,K562_3_chr21.bam",
condition_2="MCF7_1_chr21.bam,MCF7_2_chr21.bam,MCF7_3_chr21.bam,MCF7_4_chr21.bam",
c1_pair="F,F,F",
c2_pair="F,F,F,F",
times=3,
spline_fun = "ns"))
se_profile_out$density_plot
# test_1<- SEfilter(se_in=se_region)
#
#
system.time(se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1="K562_1_chr21.bam,K562_2_chr21.bam,K562_3_chr21.bam",
condition_2="MCF7_1_chr21.bam,MCF7_2_chr21.bam,MCF7_3_chr21.bam,MCF7_4_chr21.bam",
c1_pair="F,F,F",
c2_pair="F,F,F,F",
times=10,
spline_fun = "ns"))
se_profile_out$density_plot
# test_1<- SEfilter(se_in=se_region)
#
#
system.time(se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1="K562_1_chr21.bam,K562_2_chr21.bam,K562_3_chr21.bam",
condition_2="MCF7_1_chr21.bam,MCF7_2_chr21.bam,MCF7_3_chr21.bam,MCF7_4_chr21.bam",
c1_pair="F,F,F",
c2_pair="F,F,F,F",
times=10,
spline_fun = "smooth"))
# BigWig files
s1_r1_bw <- system.file("extdata","K562_1_chr21.bw",package="DASE")
s1_r2_bw <- system.file("extdata","K562_2_chr21.bw",package="DASE")
s1_r3_bw <- system.file("extdata","K562_3_chr21.bw",package="DASE")
s2_r1_bw <- system.file("extdata","MCF7_1_chr21.bw",package="DASE")
s2_r2_bw <- system.file("extdata","MCF7_2_chr21.bw",package="DASE")
s2_r3_bw <- system.file("extdata","MCF7_3_chr21.bw",package="DASE")
s2_r4_bw <- system.file("extdata","MCF7_4_chr21.bw",package="DASE")
# test bw file
se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1=paste0(s1_r1_bw,"_",s1_r2_bw,"_",s1_r3_bw),
condition_2=paste0(s2_r1_bw,"_",s2_r2_bw,"_",s2_r3_bw,"_",s2_r4_bw),
c1_pair="F,F,F",
c2_pair="F,F,F,F",
times=10,
spline_fun = "bs")
# test bw file
se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1=paste0(s1_r1_bw,"_",s1_r2_bw,"_",s1_r3_bw),
condition_2=paste0(s2_r1_bw,"_",s2_r2_bw,"_",s2_r3_bw,"_",s2_r4_bw),
data_type="bw",
c1_pair="F,F,F",
c2_pair="F,F,F,F",
times=10,
spline_fun = "bs")
paste0(s1_r1_bw,"_",s1_r2_bw,"_",s1_r3_bw)
# test bw file
se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1=paste0(s1_r1_bw,",",s1_r2_bw,",",s1_r3_bw),
condition_2=paste0(s2_r1_bw,",",s2_r2_bw,",",s2_r3_bw,",",s2_r4_bw),
data_type="bw",
c1_pair="F,F,F",
c2_pair="F,F,F,F",
times=10,
spline_fun = "bs")
se_profile_out
se_profile_out$pattern_list[[1]]
se_profile_out$density_plot
# test bw file
se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1=paste0(s1_r1_bw,",",s1_r2_bw,",",s1_r3_bw),
condition_2=paste0(s2_r1_bw,",",s2_r2_bw,",",s2_r3_bw,",",s2_r4_bw),
data_type="bw",
c1_pair="F,F,F",
c2_pair="F,F,F,F",
times=10,
spline_fun = "smooth")
se_profile_out$density_plot
# test raw count file
se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
raw_count=enhancer_count,
c1_n=3,
c2_n=4,
times=10)
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
setwd("~/Projects/super_enhancer/se_diff_paper/DASE_test/")
# test raw count file
se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
enhancer_count_table=enhancer_count,
c1_n=3,
c2_n=4,
times=10)
se_profile_out$density_plot
# test bw file
se_profile_out <- DASE(se_in = se_region,e_in = enhancer_region,
condition_1=paste0(s1_r1_bw,",",s1_r2_bw,",",s1_r3_bw),
condition_2=paste0(s2_r1_bw,",",s2_r2_bw,",",s2_r3_bw,",",s2_r4_bw),
data_type="bw",
times=10,
spline_fun = "smooth")
# path of BigWig file for each condition
s1_r1_bw <- system.file("extdata","K562_1_chr21.bw",package="DASE")
s1_r2_bw <- system.file("extdata","K562_2_chr21.bw",package="DASE")
s1_r3_bw <- system.file("extdata","K562_3_chr21.bw",package="DASE")
s2_r1_bw <- system.file("extdata","MCF7_1_chr21.bw",package="DASE")
s2_r2_bw <- system.file("extdata","MCF7_2_chr21.bw",package="DASE")
s2_r3_bw <- system.file("extdata","MCF7_3_chr21.bw",package="DASE")
s2_r4_bw <- system.file("extdata","MCF7_4_chr21.bw",package="DASE")
# concatenated path into one string for each sample/condition
c1_path <- paste(s1_r1_bw,s1_r2_bw,s1_r3_bw,sep=",")
c2_path <- paste(s2_r1_bw,s2_r2_bw,s2_r3_bw,s2_r4_bw,sep=",")
# example path strings for each sample/condition
c1_path
c2_path
# running DASE with BigWig files
DASE_out <- DASE(se_in=se_region,e_in=enhancer_region,data_type = "bw",
condition_1=c1_path,
condition_2=c2_path)
?DASE
# running DASE with BigWig files
DASE_out <- DASE(se_in=se_region,e_in=enhancer_region,data_type = "bw",
condition_1="path_to_bam/c1_r1.bam,path_to_bam/c1_r2.bam,...",
condition_2="path_to_bam/c2_r1.bam,path_to_bam/c2_r2.bam,path_to_bam/c2_r3.bam,...",
c1_pair = "F,T,...",
c2_pair = "T,F,F,...")
library(devtools)
devtools::install_github("https://github.com/tenglab/DASE.git")
# rund DASE with b-spline function (default)
DASE_out_bs <- DASE(se_in=se_region,e_in=enhancer_region,
enhancer_count_table=enhancer_count,
c1_n=3,c2_n=4,
permut=F)
library(devtools)
devtools::install_github("https://github.com/tenglab/DASE.git")
# set work directory
setwd("~/Projects/super_enhancer/se_diff_paper/DASE/")
devtools::document()
devtools::load_all()
library(devtools)
devtools::install_github("https://github.com/tenglab/DASE.git")
?DASE
library(devtools)
devtools::install_github("https://github.com/tenglab/DASE.git")
?DASE
